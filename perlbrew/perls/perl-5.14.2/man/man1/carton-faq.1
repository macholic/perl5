.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CARTON-FAQ 1"
.TH CARTON-FAQ 1 "2012-03-31" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
carton\-faq \- Frequently Asked Questions
.SH "QUESTIONS"
.IX Header "QUESTIONS"
.SS "It looks useful, but what is the use case of this tool?"
.IX Subsection "It looks useful, but what is the use case of this tool?"
The particular problem that carton is trying to address is this:
.PP
You develop a Perl web application with dozens of \s-1CPAN\s0 module
dependencies. You install these modules on your development machine,
and describe these dependencies in your Makefile.PL or some other text
format.
.PP
Now you get a produciton environment on Cloud PaaS provider or some
\&\s-1VPS\s0, you install the dependencies using \f(CW\*(C`cpanm \-\-installdeps .\*(C'\fR and
it will pull all the latest releases from \s-1CPAN\s0 as of today and
everything just works.
.PP
A few weeks later, your application becomes more popular, and you
think you need another machine to serve more requests. You set up
another machine with vanilla perl installation and install the
dependencies the same way. That will pull the \fIlatest\fR releases from
\&\s-1CPAN\s0 \fIon that date\fR, rather than the same as what you have today.
.PP
And that is the problem. It's not likely that everything just breaks
one day, but there's always a chance that one of the dependencies
breaks an \s-1API\s0 compatibility, or just uploaded a buggy version to \s-1CPAN\s0
on that particular day.
.PP
Carton allows you to \fIlock\fR these dependencies into a version
controlled system, so that every time you deploy from a checkout, it
is guaranteed that all the same versions are installed into the local
environment.
.SS "How is this different from \s-1DPAN\s0 or CPAN::Mini::Inject?"
.IX Subsection "How is this different from DPAN or CPAN::Mini::Inject?"
First of all, if you currently use \s-1DPAN\s0,
CPAN::Mini::Inject, Shipwright or any other similar tools
successfully, then that's totally fine. You don't need to switch to
carton.
.PP
If you experience difficulties with these tools, or are interested in
what could be better in carton, keep on reading.
.PP
carton definitely shares the goal with these private \s-1CPAN\s0 repository
management tool:
.IP "\(bu" 4
Manage the dependencies tree locally
.IP "\(bu" 4
Take snapshots/lock the versions
.IP "\(bu" 4
Inject private modules into the repository
.PP
Existing tools are designed to work with existing \s-1CPAN\s0 clients such as
\&\s-1CPAN\s0 or \s-1CPANPLUS\s0, and have accomplished that by working around
the \s-1CPAN\s0 mirror structure.
.PP
carton internally does the same thing, but its user interface is
centerd around the installer, by implementing a wrapper for
cpanm, so you can use the same commands in the
development mode and deployment mode.
.PP
Carton automatically maintains the carton.lock file, which is meant
to be version controlled, inside your application directory. You don't
need a separate database or a directory to maintain tarballs outside
your application. The \fIcarton.lock\fR file can always be generated out
of the local library path, and carton can reproduce the tree using the
lock file on other machines.
.SS "I'm already using perlbrew and local::lib. Can I use carton with this?"
.IX Subsection "I'm already using perlbrew and local::lib. Can I use carton with this?"
If you're using local::lib already with perlbrew perl, possibly
with the new \f(CW\*(C`perlbrew lib\*(C'\fR command, that's great! There are multiple
benefits over using perlbrew and local::lib for development and
use Carton for deployment.
.PP
The best practice and workflow to get your perl environment as clean
as possible with lots of modules installed for quick development would
be this:
.IP "\(bu" 4
Install fresh perl using perlbrew. The version should be the same
against the version you'll run on the production environment (if any).
.IP "\(bu" 4
Once the installation is done, use \f(CW\*(C`perlbrew lib\*(C'\fR command to create a
new local lib environment (let's call it \fIdevel\fR) and always use the
library as a default environment. Install as many modules as you would
like into the \fIdevel\fR library path.
.Sp
This ensures to have a vanilla \f(CW\*(C`perl\*(C'\fR library path as clean as
possible.
.IP "\(bu" 4
When you build a new project that you want to manage dependencies via
Carton, turn off the \fIdevel\fR local::lib and create a new one, like
\&\fIcarton\fR. Install Carton and all of its dependencies to the
\&\fIcarton\fR local::lib path. Then run \f(CW\*(C`carton install\*(C'\fR like you
normally do.
.Sp
Becuase \fIdevel\fR and \fIcarton\fR are isolated, the modules you installed
into \fIdevel\fR doesn't affect the process when carton builds the
dependency tree for your new project at all. This could often be
critical when you have a conditional dependency in your tree, like
Any::Moose.
