.\" Automatically generated by Pod::Man 2.26 (Pod::Simple 3.22)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Text::Xslate::Bridge::TT2Like 3"
.TH Text::Xslate::Bridge::TT2Like 3 "2011-09-15" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::Xslate::Bridge::TT2Like \- TT2 Variable Method Clone For Text::Xslate
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Text::Xslate;
\&
\&    my $xslate = Text::Xslate\->new(
\&        module => [
\&            \*(AqText::Xslate::Bridge::TT2Like\*(Aq
\&        ],
\&    );
\&
\&    # Note that all methods require a set of parenthesis to be
\&    # recognized as a method.
\&    $xslate\->render_string(
\&        \*(Aq<: $foo.length() :>\*(Aq,
\&        { foo => "foo" }
\&    );
\&
\&    $xslate\->render_string(
\&        \*(Aq<: $foo.replace("foo", "bar") :>\*(Aq,
\&        { foo => "foo" }
\&    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Text::Xslate::Bridge::TT2Like exports Template-Toolkit variable methods into
Text::Xslate namespace, such that you can use them on your variables.
.PP
The only difference between this module and Text::Xslate::Bridge::TT2 is that
Bridge::TT2 uses Template::Toolkit underneath, while this module is independent
of Template::Toolkit and therefore does not require \s-1TT\s0 to be installed
.SH "AVAILABLE FUNCTIONS"
.IX Header "AVAILABLE FUNCTIONS"
Upon loading Text::Xslate::Bridge::TT2Like, you will be able to use the
following functions in your template. Please note that some functions like
\&\f(CW\*(C`uri\*(C'\fR are available from Text::Xslate to start with, so we don't 
reimplment them. Check the manual for Text::Xslate for more info.
.ie n .SS """array"""
.el .SS "\f(CWarray\fP"
.IX Subsection "array"
.ie n .IP """item""" 4
.el .IP "\f(CWitem\fR" 4
.IX Item "item"
.PD 0
.ie n .IP """list""" 4
.el .IP "\f(CWlist\fR" 4
.IX Item "list"
.ie n .IP """hash""" 4
.el .IP "\f(CWhash\fR" 4
.IX Item "hash"
.ie n .IP """push""" 4
.el .IP "\f(CWpush\fR" 4
.IX Item "push"
.ie n .IP """pop""" 4
.el .IP "\f(CWpop\fR" 4
.IX Item "pop"
.ie n .IP """unshift""" 4
.el .IP "\f(CWunshift\fR" 4
.IX Item "unshift"
.ie n .IP """shift""" 4
.el .IP "\f(CWshift\fR" 4
.IX Item "shift"
.ie n .IP """max""" 4
.el .IP "\f(CWmax\fR" 4
.IX Item "max"
.ie n .IP """size""" 4
.el .IP "\f(CWsize\fR" 4
.IX Item "size"
.ie n .IP """defined""" 4
.el .IP "\f(CWdefined\fR" 4
.IX Item "defined"
.ie n .IP """first""" 4
.el .IP "\f(CWfirst\fR" 4
.IX Item "first"
.ie n .IP """last""" 4
.el .IP "\f(CWlast\fR" 4
.IX Item "last"
.ie n .IP """reverse""" 4
.el .IP "\f(CWreverse\fR" 4
.IX Item "reverse"
.ie n .IP """grep""" 4
.el .IP "\f(CWgrep\fR" 4
.IX Item "grep"
.ie n .IP """join""" 4
.el .IP "\f(CWjoin\fR" 4
.IX Item "join"
.ie n .IP """sort""" 4
.el .IP "\f(CWsort\fR" 4
.IX Item "sort"
.ie n .IP """nsort""" 4
.el .IP "\f(CWnsort\fR" 4
.IX Item "nsort"
.ie n .IP """unique""" 4
.el .IP "\f(CWunique\fR" 4
.IX Item "unique"
.ie n .IP """import""" 4
.el .IP "\f(CWimport\fR" 4
.IX Item "import"
.ie n .IP """merge""" 4
.el .IP "\f(CWmerge\fR" 4
.IX Item "merge"
.ie n .IP """slice""" 4
.el .IP "\f(CWslice\fR" 4
.IX Item "slice"
.ie n .IP """splice""" 4
.el .IP "\f(CWsplice\fR" 4
.IX Item "splice"
.PD
.ie n .SS """function"""
.el .SS "\f(CWfunction\fP"
.IX Subsection "function"
.ie n .IP """html_para""" 4
.el .IP "\f(CWhtml_para\fR" 4
.IX Item "html_para"
.PD 0
.ie n .IP """html_break""" 4
.el .IP "\f(CWhtml_break\fR" 4
.IX Item "html_break"
.ie n .IP """html_para_break""" 4
.el .IP "\f(CWhtml_para_break\fR" 4
.IX Item "html_para_break"
.ie n .IP """html_line_break""" 4
.el .IP "\f(CWhtml_line_break\fR" 4
.IX Item "html_line_break"
.ie n .IP """xml""" 4
.el .IP "\f(CWxml\fR" 4
.IX Item "xml"
.ie n .IP """url""" 4
.el .IP "\f(CWurl\fR" 4
.IX Item "url"
.ie n .IP """upper""" 4
.el .IP "\f(CWupper\fR" 4
.IX Item "upper"
.ie n .IP """lower""" 4
.el .IP "\f(CWlower\fR" 4
.IX Item "lower"
.ie n .IP """ucfirst""" 4
.el .IP "\f(CWucfirst\fR" 4
.IX Item "ucfirst"
.ie n .IP """lcfirst""" 4
.el .IP "\f(CWlcfirst\fR" 4
.IX Item "lcfirst"
.ie n .IP """trim""" 4
.el .IP "\f(CWtrim\fR" 4
.IX Item "trim"
.ie n .IP """null""" 4
.el .IP "\f(CWnull\fR" 4
.IX Item "null"
.ie n .IP """collapse""" 4
.el .IP "\f(CWcollapse\fR" 4
.IX Item "collapse"
.ie n .IP """indent""" 4
.el .IP "\f(CWindent\fR" 4
.IX Item "indent"
.ie n .IP """format""" 4
.el .IP "\f(CWformat\fR" 4
.IX Item "format"
.ie n .IP """truncate""" 4
.el .IP "\f(CWtruncate\fR" 4
.IX Item "truncate"
.ie n .IP """repeat""" 4
.el .IP "\f(CWrepeat\fR" 4
.IX Item "repeat"
.ie n .IP """replace""" 4
.el .IP "\f(CWreplace\fR" 4
.IX Item "replace"
.ie n .IP """remove""" 4
.el .IP "\f(CWremove\fR" 4
.IX Item "remove"
.PD
.ie n .SS """hash"""
.el .SS "\f(CWhash\fP"
.IX Subsection "hash"
.ie n .IP """item""" 4
.el .IP "\f(CWitem\fR" 4
.IX Item "item"
.PD 0
.ie n .IP """hash""" 4
.el .IP "\f(CWhash\fR" 4
.IX Item "hash"
.ie n .IP """size""" 4
.el .IP "\f(CWsize\fR" 4
.IX Item "size"
.ie n .IP """each""" 4
.el .IP "\f(CWeach\fR" 4
.IX Item "each"
.ie n .IP """keys""" 4
.el .IP "\f(CWkeys\fR" 4
.IX Item "keys"
.ie n .IP """values""" 4
.el .IP "\f(CWvalues\fR" 4
.IX Item "values"
.ie n .IP """items""" 4
.el .IP "\f(CWitems\fR" 4
.IX Item "items"
.ie n .IP """pairs""" 4
.el .IP "\f(CWpairs\fR" 4
.IX Item "pairs"
.ie n .IP """list""" 4
.el .IP "\f(CWlist\fR" 4
.IX Item "list"
.ie n .IP """exists""" 4
.el .IP "\f(CWexists\fR" 4
.IX Item "exists"
.ie n .IP """defined""" 4
.el .IP "\f(CWdefined\fR" 4
.IX Item "defined"
.ie n .IP """delete""" 4
.el .IP "\f(CWdelete\fR" 4
.IX Item "delete"
.ie n .IP """import""" 4
.el .IP "\f(CWimport\fR" 4
.IX Item "import"
.ie n .IP """sort""" 4
.el .IP "\f(CWsort\fR" 4
.IX Item "sort"
.ie n .IP """nsort""" 4
.el .IP "\f(CWnsort\fR" 4
.IX Item "nsort"
.PD
.ie n .SS """scalar"""
.el .SS "\f(CWscalar\fP"
.IX Subsection "scalar"
.ie n .IP """item""" 4
.el .IP "\f(CWitem\fR" 4
.IX Item "item"
.PD 0
.ie n .IP """list""" 4
.el .IP "\f(CWlist\fR" 4
.IX Item "list"
.ie n .IP """hash""" 4
.el .IP "\f(CWhash\fR" 4
.IX Item "hash"
.ie n .IP """length""" 4
.el .IP "\f(CWlength\fR" 4
.IX Item "length"
.ie n .IP """size""" 4
.el .IP "\f(CWsize\fR" 4
.IX Item "size"
.ie n .IP """defined""" 4
.el .IP "\f(CWdefined\fR" 4
.IX Item "defined"
.ie n .IP """match""" 4
.el .IP "\f(CWmatch\fR" 4
.IX Item "match"
.ie n .IP """search""" 4
.el .IP "\f(CWsearch\fR" 4
.IX Item "search"
.ie n .IP """repeat""" 4
.el .IP "\f(CWrepeat\fR" 4
.IX Item "repeat"
.ie n .IP """replace""" 4
.el .IP "\f(CWreplace\fR" 4
.IX Item "replace"
.ie n .IP """remove""" 4
.el .IP "\f(CWremove\fR" 4
.IX Item "remove"
.ie n .IP """split""" 4
.el .IP "\f(CWsplit\fR" 4
.IX Item "split"
.ie n .IP """chunk""" 4
.el .IP "\f(CWchunk\fR" 4
.IX Item "chunk"
.ie n .IP """substr""" 4
.el .IP "\f(CWsubstr\fR" 4
.IX Item "substr"
.PD
.SH "ACKNOWLEDGEMENT"
.IX Header "ACKNOWLEDGEMENT"
Original code was taken from Template::VMethods, Template::Filters by Andy Wardley.
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright (c) 2010 Daisuke Maki \f(CW\*(C`<daisuke@endeworks.jp>\*(C'\fR
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
See http://www.perl.com/perl/misc/Artistic.html
