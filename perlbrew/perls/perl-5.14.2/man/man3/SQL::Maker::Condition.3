.\" Automatically generated by Pod::Man 2.26 (Pod::Simple 3.22)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SQL::Maker::Condition 3"
.TH SQL::Maker::Condition 3 "2012-06-27" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SQL::Maker::Condition \- condition object for SQL::Maker
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&    my $condition = SQL::Maker::Condition\->new(
\&        name_sep   => \*(Aq.\*(Aq,
\&        quote_char => \*(Aq\`\*(Aq,
\&    );
\&    $condition\->add(\*(Aqfoo_id\*(Aq => 3);
\&    $condition\->add(\*(Aqbar_id\*(Aq => 4);
\&    $sql = $condition\->as_sql(); # (\`foo_id\`=?) AND (\`bar_id\`=?)
\&    @bind = $condition\->bind();  # (3, 4)
\&
\&    # composite and
\&    my $other = SQL::Maker::Condition\->new(
\&        name_sep => \*(Aq.\*(Aq,
\&        quote_char => \*(Aq\`\*(Aq,
\&    );
\&    $other\->add(\*(Aqname\*(Aq => \*(Aqjohn\*(Aq);
\&    my $comp_and = $condition & $other;
\&    $sql = $comp_and\->as_sql(); # ((\`foo_id\`=?) AND (\`bar_id\`=?)) AND (\`name\`=?)
\&    @bind = $comp_and\->bind();  # (3, 4, \*(Aqjohn\*(Aq)
\&
\&    # composite or
\&    my $comp_or = $condition | $other;
\&    $sql = $comp_and\->as_sql(); # ((\`foo_id\`=?) AND (\`bar_id\`=?)) OR (\`name\`=?)
\&    @bind = $comp_and\->bind();  # (3, 4, \*(Aqjohn\*(Aq)
.Ve
.SH "CONDITION CHEAT SHEET"
.IX Header "CONDITION CHEAT SHEET"
Here is a cheat sheet for conditions.
.PP
.Vb 3
\&    IN:        [\*(Aqfoo\*(Aq,\*(Aqbar\*(Aq]
\&    OUT QUERY: \*(Aq\`foo\` = ?\*(Aq
\&    OUT BIND:  (\*(Aqbar\*(Aq)
\&
\&    IN:        [\*(Aqfoo\*(Aq,[\*(Aqbar\*(Aq,\*(Aqbaz\*(Aq]]
\&    OUT QUERY: \*(Aq\`foo\` IN (?, ?)\*(Aq
\&    OUT BIND:  (\*(Aqbar\*(Aq,\*(Aqbaz\*(Aq)
\&
\&    IN:        [\*(Aqfoo\*(Aq,{\*(AqIN\*(Aq => [\*(Aqbar\*(Aq,\*(Aqbaz\*(Aq]}]
\&    OUT QUERY: \*(Aq\`foo\` IN (?, ?)\*(Aq
\&    OUT BIND:  (\*(Aqbar\*(Aq,\*(Aqbaz\*(Aq)
\&
\&    IN:        [\*(Aqfoo\*(Aq,{\*(Aqnot IN\*(Aq => [\*(Aqbar\*(Aq,\*(Aqbaz\*(Aq]}]
\&    OUT QUERY: \*(Aq\`foo\` NOT IN (?, ?)\*(Aq
\&    OUT BIND:  (\*(Aqbar\*(Aq,\*(Aqbaz\*(Aq)
\&
\&    IN:        [\*(Aqfoo\*(Aq,{\*(Aq!=\*(Aq => \*(Aqbar\*(Aq}]
\&    OUT QUERY: \*(Aq\`foo\` != ?\*(Aq
\&    OUT BIND:  (\*(Aqbar\*(Aq)
\&
\&    IN:        [\*(Aqfoo\*(Aq,\e\*(AqIS NOT NULL\*(Aq]
\&    OUT QUERY: \*(Aq\`foo\` IS NOT NULL\*(Aq
\&    OUT BIND:  ()
\&
\&    IN:        [\*(Aqfoo\*(Aq,{\*(Aqbetween\*(Aq => [\*(Aq1\*(Aq,\*(Aq2\*(Aq]}]
\&    OUT QUERY: \*(Aq\`foo\` BETWEEN ? AND ?\*(Aq
\&    OUT BIND:  (\*(Aq1\*(Aq,\*(Aq2\*(Aq)
\&
\&    IN:        [\*(Aqfoo\*(Aq,{\*(Aqlike\*(Aq => \*(Aqxaic%\*(Aq}]
\&    OUT QUERY: \*(Aq\`foo\` LIKE ?\*(Aq
\&    OUT BIND:  (\*(Aqxaic%\*(Aq)
\&
\&    IN:        [\*(Aqfoo\*(Aq,[{\*(Aq>\*(Aq => \*(Aqbar\*(Aq},{\*(Aq<\*(Aq => \*(Aqbaz\*(Aq}]]
\&    OUT QUERY: \*(Aq(\`foo\` > ?) OR (\`foo\` < ?)\*(Aq
\&    OUT BIND:  (\*(Aqbar\*(Aq,\*(Aqbaz\*(Aq)
\&
\&    IN:        [\*(Aqfoo\*(Aq,[\*(Aq\-and\*(Aq,{\*(Aq>\*(Aq => \*(Aqbar\*(Aq},{\*(Aq<\*(Aq => \*(Aqbaz\*(Aq}]]
\&    OUT QUERY: \*(Aq(\`foo\` > ?) AND (\`foo\` < ?)\*(Aq
\&    OUT BIND:  (\*(Aqbar\*(Aq,\*(Aqbaz\*(Aq)
\&
\&    IN:        [\*(Aqfoo\*(Aq,[\*(Aq\-and\*(Aq,\*(Aqfoo\*(Aq,\*(Aqbar\*(Aq,\*(Aqbaz\*(Aq]]
\&    OUT QUERY: \*(Aq(\`foo\` = ?) AND (\`foo\` = ?) AND (\`foo\` = ?)\*(Aq
\&    OUT BIND:  (\*(Aqfoo\*(Aq,\*(Aqbar\*(Aq,\*(Aqbaz\*(Aq)
\&
\&    IN:        [\*(Aqfoo_id\*(Aq,\e[\*(AqIN (SELECT foo_id FROM bar WHERE t=?)\*(Aq,44]]
\&    OUT QUERY: \*(Aq\`foo_id\` IN (SELECT foo_id FROM bar WHERE t=?)\*(Aq
\&    OUT BIND:  (\*(Aq44\*(Aq)
\&
\&    IN:        [\*(Aqfoo_id\*(Aq, {IN => \e[\*(AqSELECT foo_id FROM bar WHERE t=?\*(Aq,44]}]
\&    OUT QUERY: \*(Aq\`foo_id\` IN (SELECT foo_id FROM bar WHERE t=?)\*(Aq
\&    OUT BIND:  (\*(Aq44\*(Aq)
\&
\&    IN:        [\*(Aqfoo_id\*(Aq,\e[\*(AqMATCH (col1, col2) AGAINST (?)\*(Aq,\*(Aqapples\*(Aq]]
\&    OUT QUERY: \*(Aq\`foo_id\` MATCH (col1, col2) AGAINST (?)\*(Aq
\&    OUT BIND:  (\*(Aqapples\*(Aq)
\&
\&    IN:        [\*(Aqfoo_id\*(Aq,undef]
\&    OUT QUERY: \*(Aq\`foo_id\` IS NULL\*(Aq
\&    OUT BIND:  ()
\&
\&    IN:        [\*(Aqfoo_id\*(Aq,{\*(AqIN\*(Aq => []}]
\&    OUT QUERY: \*(Aq0=1\*(Aq
\&    OUT BIND:  ()
\&
\&    IN:        [\*(Aqfoo_id\*(Aq,{\*(AqNOT IN\*(Aq => []}]
\&    OUT QUERY: \*(Aq1=1\*(Aq
\&    OUT BIND:  ()
\&
\&    IN:        [\*(Aqfoo_id\*(Aq, sql_type(\e3, SQL_INTEGER)]
\&    OUT QUERY: \*(Aq\`foo_id\` = ?\*(Aq
\&    OUT BIND:  sql_type(\e3, SQL_INTEGER)
\&
\&    IN:        [\*(Aqcreated_on\*(Aq, { \*(Aq>\*(Aq, \e\*(AqDATE_SUB(NOW(), INTERVAL 1 DAY)\*(Aq }]
\&    OUT QUERY: \*(Aq\`created_on\` > DATE_SUB(NOW(), INTERVAL 1 DAY)\*(Aq
\&    OUT BIND:
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
SQL::Maker
