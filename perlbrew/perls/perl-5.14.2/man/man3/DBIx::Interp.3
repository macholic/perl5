.\" Automatically generated by Pod::Man 2.26 (Pod::Simple 3.22)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Interp 3"
.TH DBIx::Interp 3 "2012-06-27" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Interp \- Interpolate Perl variables into SQL with DBI
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use DBI;
\&  use DBIx::Interp \*(Aq:all\*(Aq;
\&
\&  my $dbx = DBIx::Interp\->new($dbh);
\&
\&  my $rv = $dbx\->do_i(\*(AqINSERT INTO table\*(Aq, \e%item);
\&  my $rv = $dbx\->do_i(\*(AqUPDATE table SET\*(Aq,  \e%item, \*(AqWHERE item_id <> \*(Aq, \e2);
\&  my $rv = $dbx\->do_i(\*(AqDELETE FROM table WHERE item_id = \*(Aq, \e2);
\&
\&  my $LoH = $dbx\->selectall_arrayref_i(\*(Aq
\&        SELECT * FROM table WHERE x = \*(Aq, \e$s, \*(AqAND y IN\*(Aq, \e@v
\&        ,attr(Slice=>{}));
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
DBIx::Interp brings SQL::Interp and \s-1DBI\s0 together in a
natural way.  Please read the documentation of those two modules if you are
unfamiliar with them.  The DBIx::Interp interface adds methods to the \s-1DBI\s0
interface with an \*(L"_i\*(R" suffix, indicating that SQL::Interp interpolatation is performed
in these cases.
.PP
\&\fI Note that this module is no longer used by the maintainer. DBIx::Simple now features SQL::Interp
integration and is the recommended alternative. \fR
.SH "Helper Functions you may need"
.IX Header "Helper Functions you may need"
.ie n .SS """attr"""
.el .SS "\f(CWattr\fP"
.IX Subsection "attr"
.Vb 1
\&  dbi_interp("SELECT * from my_table", attr( Slice => {} ) );
.Ve
.PP
Creates and returns an DBIx::Interp::Attr object. When processed
by \fIdbi_interp()\fR, it will add the provided key/value pairs
to the \*(L"%attrs\*(R" hash that is accepted by many \s-1DBI\s0 methods.
.ie n .SS """key_field"""
.el .SS "\f(CWkey_field\fP"
.IX Subsection "key_field"
.Vb 1
\&  $keyobj = key_field($key_field);
.Ve
.PP
Creates and returns an DBIx::Interp::Key object. When processed by
\&\fIdbi_interp()\fR, an extra \f(CW$key_field\fR value will be returned in the result so
that the result is suitable for passing into \f(CW$dbh\fR\->fetchrow_hashref and related
methods.
.PP
.Vb 3
\&  my ($sql, $key, $attr, @bind) =
\&  my @params = dbi_interp "SELECT * FROM mytable", key_field(\*(Aqitemid\*(Aq);
\&  $dbh\->selectall_hashref(@params);
.Ve
.SH "Database object (DBX) methods"
.IX Header "Database object (DBX) methods"
An object of type DBIx::Interp represents (and wraps) a database
handle.  Most of its methods are wrappers around corresponding \s-1DBI\s0
methods.
.ie n .IP """new"" (static method)" 4
.el .IP "\f(CWnew\fR (static method)" 4
.IX Item "new (static method)"
.Vb 1
\& my $dbx = DBIx::Interp\->new($db, %params);
.Ve
.Sp
Creates a new object, creating or attaching a \s-1DBI\s0 handle.
.Sp
\&\f(CW$db\fR is either a \s-1DBI\s0 database handle or an \s-1ARRAYREF\s0
containing parameters that will be passed to DBI::connect, e.g.
[$data_source, \f(CW$username\fR, \f(CW$auth\fR, \e%attr].  This parameter may be
omitted.
.Sp
Any additional \f(CW%params\fR are passed onto
SQL::Interp::new.
.ie n .IP """connect"" (static method)" 4
.el .IP "\f(CWconnect\fR (static method)" 4
.IX Item "connect (static method)"
.Vb 1
\& $dbx = DBIx::Interp\->connect($data_source, $username, $auth, \e%attr);
.Ve
.Sp
Connects to a database.
.Sp
This is identical to DBI::connect except that it returns at
DBIx::Interp object.  An alternate way to connect or attach an
existing \s-1DBI\s0 handle is via the \f(CW\*(C`new\*(C'\fR method.
.ie n .IP """dbh""" 4
.el .IP "\f(CWdbh\fR" 4
.IX Item "dbh"
.Vb 1
\& $dbh = $dbx\->dbh();
.Ve
.Sp
Returns the underlying \s-1DBI\s0 handle \f(CW$dbh\fR.  The is useful if you need to
pass the \s-1DBI\s0 handle to code that does not use SQL::Interp.
.Sp
.Vb 2
\& $dbx\->dbh()\->selectall_arrayref(
\&     "SELECT * FROM mytable WHERE x = ?", undef, $x);
.Ve
.ie n .IP """stx""" 4
.el .IP "\f(CWstx\fR" 4
.IX Item "stx"
.Vb 1
\& $stx = $dbx\->stx();
.Ve
.Sp
Returns the underlying statement handle set \f(CW$stx\fR. (These are discussed
later.)  Each DBIx::Interp object contains one statement handle
set for use on non-prepared database calls (e.g. selectall_.*()
methods).
.Sp
.Vb 1
\& $dbx\->stx()\->max_sths(10);
.Ve
.SS "do_i"
.IX Subsection "do_i"
.SS "selectall_arrayref_i"
.IX Subsection "selectall_arrayref_i"
.SS "selectall_hashref_i"
.IX Subsection "selectall_hashref_i"
.SS "selectcol_arrayref_i"
.IX Subsection "selectcol_arrayref_i"
.SS "selectrow_array_i"
.IX Subsection "selectrow_array_i"
.SS "selectrow_arrayref_i"
.IX Subsection "selectrow_arrayref_i"
.SS "selectrow_hashref_i"
.IX Subsection "selectrow_hashref_i"
These methods are identical to those in \s-1DBI\s0 except interpolation is performed
via SQL::Interp.
.SS "prepare"
.IX Subsection "prepare"
.Vb 1
\& $stx = $dbx\->prepare();
.Ve
.PP
Creates a new statement handle set ($stx of type
SQL::Interp::STX) associated with \f(CW$dbx\fR.  There are no parameters.
.PP
A statement handle set (stx) is an abstraction of a statement handle
and represents an entire \fIset of statement handles\fR for a given
\&\fIclass of \s-1SQL\s0 queries\fR.  This abstraction is used because a single
interpolation list may interpolate into any number of \s-1SQL\s0 queries
(depending on variable input), so multiple statement handles may need
to be managed and cached.  Typically, you do not need to call
\&\*(L"prepare\*(R" directly because DBIx::Interp can transparently mangage
a statement handle set (see \f(CW$dbx\fR\->\fIstx()\fR\->max_sths(10)).
.PP
Up to one statement handle in a set is considered \fIactive\fR.
Other operations performed on the statement handle set are passed to
the active statement handle so that the statement handle set often
looks and feels like a regular statement handle.
.SS "Statement handle set (\s-1STX\s0) methods"
.IX Subsection "Statement handle set (STX) methods"
These methods are for statement handle set objects.
.ie n .IP """new""" 4
.el .IP "\f(CWnew\fR" 4
.IX Item "new"
.Vb 1
\&  $stx = SQL::Interp::STX\->new($dbx);
.Ve
.Sp
Creates a new statement handle set.  Typically this is not
called directly but rather is invoked through \f(CW\*(C`prepare()\*(C'\fR.
.ie n .IP """max_sths""" 4
.el .IP "\f(CWmax_sths\fR" 4
.IX Item "max_sths"
.Vb 2
\&  $max_sths = $stx\->max_sths(); # get
\&  $stx\->max_sths($max_sths);    # set
.Ve
.Sp
Gets or sets the maximum number of statement handles to cache
in the statement handle set.  The default and minimum value is 1.
.ie n .IP """sth""" 4
.el .IP "\f(CWsth\fR" 4
.IX Item "sth"
.Vb 1
\&  $sth = $stx\->sth();
.Ve
.Sp
Gets the current active statement handle (e.g. the only that was
just executed).  Returns undef on none.
.ie n .IP """sths""" 4
.el .IP "\f(CWsths\fR" 4
.IX Item "sths"
.Vb 1
\&  $sths = $stx\->sths();
.Ve
.Sp
Return a hashref of contained statement handles (map: \f(CW$sql\fR \-> \f(CW$sth\fR).
.ie n .IP """execute""" 4
.el .IP "\f(CWexecute\fR" 4
.IX Item "execute"
.Vb 1
\&  $rv = $stx\->execute(@list);
.Ve
.Sp
Executes the query in the given interpolation list against a statement
handle.  If no statement matching statement handle exists, a new one
is prepared.  The used statement handle is made the active statement
handle.  Return on error behavior is similar to \s-1DBI\s0's execute.
.Sp
\&\f(CW@list\fR is an interpolation list (suitable for passing to \f(CW\*(C`dbi_interp()\*(C'\fR).
.ie n .IP """fetch...""" 4
.el .IP "\f(CWfetch...\fR" 4
.IX Item "fetch..."
.Vb 1
\&  $ary_ref = $stx\->fetchrow_arrayref();
.Ve
.Sp
Various fetch.* methods analogous to those in DBIx::Interp are
available.  The fetch will be performed against the active statement
handle in the set.
.PP
These are more advanced examples.
.SS "Binding variable types (\s-1DBI\s0 bind_param)"
.IX Subsection "Binding variable types (DBI bind_param)"
Compare this much simpler code to the example in
SQL::Interp.
.PP
.Vb 5
\&  $dbx\->selectall_arrayref(
\&      "SELECT * FROM mytable WHERE",
\&      "x=", \e$x, "AND y=", sql_type(\e$y, SQL_VARCHAR), "AND z IN",
\&      sql_type([1, 2], SQL_INTEGER)
\&  );
.Ve
.SH "DESIGN NOTES"
.IX Header "DESIGN NOTES"
.SS "Philosophy and requirements"
.IX Subsection "Philosophy and requirements"
DBIx::Interp is designed to look an feel like \s-1DBI\s0 even when the
\&\s-1DBI\s0 interface is not entirely user friendly (e.g. the
(fetch|select)(all|row)?_(array|hash)(ref)? and do methods).  Still,
the approach lowers the learning code and could simplify the process
of converting existing \s-1DBI\s0 code over to SQL::Interp.
.PP
The use of statement handle sets (\s-1STX\s0) is not strictly necessary but
is rather designed to mimic \s-1DBI\s0's statement handles more than anything
else.  The \s-1DBX\s0 object itself contains a statement handle set, which
can be used for non-prepared calls such as to selectall_.*() methods
(i.e. cache statement handles like in DBIx::Simple's keep_statements).
.PP
.Vb 3
\&  $dbx\->stx()\->max_sths(2);
\&  $dbx\->do(...) for 1..5;
\&  $dbx\->do(...) for 1..5;
.Ve
.PP
An ideal solution would probably be to \fIintegrate SQL::Interp
into DBIx::Simple\fR rather than directly into \s-1DBI\s0.
.SS "Proposed enhancements"
.IX Subsection "Proposed enhancements"
The following enhancements to SQL::Interp have been proposed.
The most important suggestions are listed at top, and some
suggestions could be rejected.
.PP
\&\s-1DBI\s0 database handle and statement handle attributes are not currently
exposed from the wrapper except via \f(CW$dbx\fR\->\fIdbh()\fR\->{...}.  Maybe a Tie
can be used. e.g. \f(CW$dbx\fR\->{mysql_insert_id}
.PP
Support might be added for something analogous to \s-1DBI\s0's
bind_param_inout.
.PP
\&\s-1DBI\s0's bind_param_array is not currently supported.
A syntax as follows might be used:
.PP
.Vb 1
\&  "INSERT INTO mytable", [[...], [...], ...]
.Ve
.PP
Passing identified variables:
.PP
.Vb 7
\&  my $x = {one => \*(Aqtwo\*(Aq};
\&  my $stx = $dbx\->prepare("SELECT * FROM mytable WHERE", sql_type(\e$x);
\&  $stx\->execute_vars();
\&  ...
\&  $x\->{two} = \*(Aqthree\*(Aq;
\&  $stx\->execute_vars();
\&  ...
\&
\&  my $x = {one => \*(Aqtwo\*(Aq};
\&  my $y = {one => \*(Aqthree\*(Aq, two => \*(Aqfour\*(Aq};
\&  my $stx = $dbx\->prepare("SELECT * FROM mytable WHERE", sql_type($x, \*(Aqx\*(Aq));
\&  $stx\->execute_vars();
\&  ...
\&  $stx\->execute_vars(sql_type($x, \*(Aqx\*(Aq); # or?
\&  $stx\->execute_vars(x => $x); # or?
\&  ...
.Ve
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
David Manura (<http://math2.org/david>) (author).  The existence and
original design of this module as a wrapper around \s-1DBI\s0 was suggested
by Jim Cromie.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
Bug reports and comments on the design are most welcome.  See the main
SQL::Interp module for details.
.SH "LEGAL"
.IX Header "LEGAL"
Copyright (c) 2004\-2005, David Manura.  This module is free
software. It may be used, redistributed and/or modified under the same
terms as Perl itself.  See
<http://www.perl.com/perl/misc/Artistic.html>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.SS "Other modules in this distribution"
.IX Subsection "Other modules in this distribution"
SQL::Interp,
.PP
\&\s-1DBI\s0.
.PP
Related modules:
DBIx::Simple,
SQL::Abstract,
DBIx::Abstract,
Class::DBI,
DBIx::Class,
Rose::DB.
