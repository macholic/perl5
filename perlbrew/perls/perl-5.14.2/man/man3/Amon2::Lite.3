.\" Automatically generated by Pod::Man 2.26 (Pod::Simple 3.22)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Amon2::Lite 3"
.TH Amon2::Lite 3 "2012-06-27" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Amon2::Lite \- Sinatra\-ish framework on Amon2!
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Amon2::Lite;
\&
\&    get \*(Aq/\*(Aq => sub {
\&        my ($c) = @_;
\&        return $c\->render(\*(Aqindex.tt\*(Aq);
\&    };
\&
\&    _\|_PACKAGE_\|_\->to_app();
\&
\&    _\|_DATA_\|_
\&
\&    @@ index.tt
\&    <!doctype html>
\&    <html>
\&        <body>Hello</body>
\&    </html>
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a Sinatra-ish wrapper for Amon2.
.PP
\&\fB\s-1THIS\s0 \s-1MODULE\s0 \s-1IS\s0 \s-1BETA\s0 \s-1STATE\s0. \s-1API\s0 \s-1MAY\s0 \s-1CHANGE\s0 \s-1WITHOUT\s0 \s-1NOTICE\s0\fR.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .IP "any(\e@methods, $path, \e&code)" 4
.el .IP "any(\e@methods, \f(CW$path\fR, \e&code)" 4
.IX Item "any(@methods, $path, &code)"
.PD 0
.IP "any($path, \e&code)" 4
.IX Item "any($path, &code)"
.PD
Register new route for router.
.ie n .IP "get($path, $code\->($c))" 4
.el .IP "get($path, \f(CW$code\fR\->($c))" 4
.IX Item "get($path, $code->($c))"
Register new route for router.
.ie n .IP "post($path, $code\->($c))" 4
.el .IP "post($path, \f(CW$code\fR\->($c))" 4
.IX Item "post($path, $code->($c))"
Register new route for router.
.IP "_\|_PACKAGE_\|_\->load_plugin($name, \e%opts)" 4
.IX Item "__PACKAGE__->load_plugin($name, %opts)"
Load a plugin to the context object.
.IP "[\s-1EXPERIMENTAL\s0] _\|_PACKAGE_\|_\->enable_session(%args)" 4
.IX Item "[EXPERIMENTAL] __PACKAGE__->enable_session(%args)"
This method enables Plack::Middleware::Session.
.Sp
\&\f(CW%args\fR would be pass to enabled to \f(CW\*(C`Plack::Middleware::Session\->new\*(C'\fR.
.Sp
The default state class is Plack::Session::State::Cookie, and store class is Plack::Session::Store::File.
.Sp
This option enables a response filter, that adds \f(CW\*(C` Cache\-Control: private \*(C'\fR header.
.ie n .IP "[\s-1EXPERIMENTAL\s0] _\|_PACKAGE_\|_\->enable_middleware($klass, %args)" 4
.el .IP "[\s-1EXPERIMENTAL\s0] _\|_PACKAGE_\|_\->enable_middleware($klass, \f(CW%args\fR)" 4
.IX Item "[EXPERIMENTAL] __PACKAGE__->enable_middleware($klass, %args)"
.Vb 1
\&    _\|_PACKAGE_\|_\->enable_middleware(\*(AqPlack::Middleware::XFramework\*(Aq, framework => \*(AqAmon2::Lite\*(Aq);
.Ve
.Sp
Enable the Plack middlewares.
.IP "_\|_PACKAGE_\|_\->to_app(%args)" 4
.IX Item "__PACKAGE__->to_app(%args)"
Create new \s-1PSGI\s0 application instance.
.Sp
There is a options.
.RS 4
.IP "no_x_content_type_options : default false" 4
.IX Item "no_x_content_type_options : default false"
.Vb 1
\&    _\|_PACKAGE_\|_\->to_app(no_x_content_type_options => 1);
.Ve
.Sp
Amon2::Lite puts \f(CW\*(C`X\-Content\-Type\-Options\*(C'\fR header by default for security reason.
You can disable this feature by this option.
.IP "no_x_frame_options" 4
.IX Item "no_x_frame_options"
.Vb 1
\&    _\|_PACKAGE_\|_\->to_app(no_x_frame_options => 1);
.Ve
.Sp
Amon2::Lite puts \f(CW\*(C`X\-Frame\-Options: DENY\*(C'\fR header by default for security reason.
You can disable this feature by this option.
.RE
.RS 4
.RE
.SH "FAQ"
.IX Header "FAQ"
.IP "How can I configure the options for Xslate?" 4
.IX Item "How can I configure the options for Xslate?"
You can provide a constructor arguments by configuration.
Write following lines on your app.psgi.
.Sp
.Vb 3
\&    _\|_PACKAGE_\|_\->template_options(
\&        syntax => \*(AqKolon\*(Aq,
\&    );
.Ve
.IP "How can I use other template engines instead of Text::Xslate?" 4
.IX Item "How can I use other template engines instead of Text::Xslate?"
You can use any template engine with Amon2::Lite. You can overwrite create_view method same as normal Amon2.
.Sp
This is a example to use Text::MicroTemplate::File.
.Sp
.Vb 1
\&    use Tiffany::Text::MicroTemplate::File;
\&
\&    sub create_view {
\&        Tiffany::Text::MicroTemplate::File\->new(+{
\&            include_path => [\*(Aq./tmpl/\*(Aq]
\&        })
\&    }
.Ve
.IP "How can I handle static files?" 4
.IX Item "How can I handle static files?"
If you pass the 'handle_static' option to 'to_app' method, Amon2::Lite handles /static/ path to ./static/ directory.
.Sp
.Vb 2
\&    use Amon2::Lite;
\&    _\|_PACKAGE_\|_\->to_app(handle_static => 1);
.Ve
.IP "Where is a example codes?" 4
.IX Item "Where is a example codes?"
There is a tiny TinyURL example: <https://github.com/tokuhirom/MyTinyURL/blob/master/app.psgi>.
.IP "How can I use session?" 4
.IX Item "How can I use session?"
You can enable session by \f(CW\*(C`_\|_PACKAGE_\|_\->enable_session()\*(C'\fR. And you can access the session object by \f(CW\*(C`$c\->session\*(C'\fR accessor.
.Sp
.Vb 1
\&    use Amon2::Lite;
\&
\&    get \*(Aq/\*(Aq => sub {
\&        my $c = shift;
\&        my $cnt = $c\->session\->get(\*(Aqcnt\*(Aq) || 1;
\&        $c\->session\->set(\*(Aqcnt\*(Aq => $cnt+1);
\&        return $c\->create_response(200, [], [$cnt]);
\&    };
\&
\&    _\|_PACKAGE_\|_\->enable_session(); # 
\&    _\|_PACKAGE_\|_\->to_app();
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Tokuhiro Matsuno <tokuhirom AAJKLFJEF@ \s-1GMAIL\s0 \s-1COM\s0>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) Tokuhiro Matsuno
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
