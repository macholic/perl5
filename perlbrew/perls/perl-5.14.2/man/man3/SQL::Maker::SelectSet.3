.\" Automatically generated by Pod::Man 2.26 (Pod::Simple 3.22)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SQL::Maker::SelectSet 3"
.TH SQL::Maker::SelectSet 3 "2012-06-27" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SQL::Maker::SelectSet \- provides set functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&    use SQL::Maker::SelectSet qw(union_all except);
\&    my $s1 = SQL::Maker::Select \->new()
\&                                \->add_select(\*(Aqfoo\*(Aq)
\&                                \->add_from(\*(Aqt1\*(Aq);
\&    my $s2 = SQL::Maker::Select \->new()
\&                                \->add_select(\*(Aqbar\*(Aq)
\&                                \->add_from(\*(Aqt2\*(Aq);
\&    union_all( $s1, $s2 )\->as_sql;
\&    # =>
\&    #  SQL::Maker::SelectSet\->new_set(
\&    #      operator => \*(AqUNION ALL\*(Aq,
\&    #      new_line => $s1\->new_line
\&    #  )\->add_statement($s1)
\&    #   \->add_statement($s2)
\&    #   \->as_sql;
\&    # => "SELECT foo FROM t1 UNION ALL SELECT bar FROM t2"
\&    except( $s1, $s2 )\->as_sql;
\&    # => SQL::Maker::SelectSet\->new_set( operator => \*(AqEXCEPT\*(Aq, new_line => $s1\->new_line )
\&    #     \->add_statement( $s1 )
\&    #     \->add_statement( $s2 )
\&    #     \->as_sql;
\&    # => "SELECT foo FROM t1 EXCEPT SELECT bar FROM t2"
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides some set functions which return a SQL::Maker::SelectSet object
inherited from SQL::Maker::Select.
.SH "FUNCTION"
.IX Header "FUNCTION"
.ie n .IP "union($select :SQL::Maker::Select | $set :SQL::Maker::SelectSet) : SQL::Maker::SelectSet" 4
.el .IP "union($select :SQL::Maker::Select | \f(CW$set\fR :SQL::Maker::SelectSet) : SQL::Maker::SelectSet" 4
.IX Item "union($select :SQL::Maker::Select | $set :SQL::Maker::SelectSet) : SQL::Maker::SelectSet"
Tow statements are combined by \f(CW\*(C`UNION\*(C'\fR.
.ie n .IP "union_all($select :SQL::Maker::Select | $set :SQL::Maker::SelectSet) : SQL::Maker::SelectSet" 4
.el .IP "union_all($select :SQL::Maker::Select | \f(CW$set\fR :SQL::Maker::SelectSet) : SQL::Maker::SelectSet" 4
.IX Item "union_all($select :SQL::Maker::Select | $set :SQL::Maker::SelectSet) : SQL::Maker::SelectSet"
Tow statements are combined by \f(CW\*(C`UNION ALL\*(C'\fR.
.ie n .IP "intersect($select :SQL::Maker::Select | $set :SQL::Maker::SelectSet) : SQL::Maker::SelectSet" 4
.el .IP "intersect($select :SQL::Maker::Select | \f(CW$set\fR :SQL::Maker::SelectSet) : SQL::Maker::SelectSet" 4
.IX Item "intersect($select :SQL::Maker::Select | $set :SQL::Maker::SelectSet) : SQL::Maker::SelectSet"
Tow statements are combined by \f(CW\*(C`INTERSECT\*(C'\fR.
.ie n .IP "intersect_all($select :SQL::Maker::Select | $set :SQL::Maker::SelectSet) : SQL::Maker::SelectSet" 4
.el .IP "intersect_all($select :SQL::Maker::Select | \f(CW$set\fR :SQL::Maker::SelectSet) : SQL::Maker::SelectSet" 4
.IX Item "intersect_all($select :SQL::Maker::Select | $set :SQL::Maker::SelectSet) : SQL::Maker::SelectSet"
Tow statements are combined by \f(CW\*(C`INTERSECT ALL\*(C'\fR.
.ie n .IP "except($select :SQL::Maker::Select | $set :SQL::Maker::SelectSet) : SQL::Maker::SelectSet" 4
.el .IP "except($select :SQL::Maker::Select | \f(CW$set\fR :SQL::Maker::SelectSet) : SQL::Maker::SelectSet" 4
.IX Item "except($select :SQL::Maker::Select | $set :SQL::Maker::SelectSet) : SQL::Maker::SelectSet"
Tow statements are combined by \f(CW\*(C`EXCEPT\*(C'\fR.
.ie n .IP "except($select :SQL::Maker::Select | $set :SQL::Maker::SelectSet) : SQL::Maker::SelectSet" 4
.el .IP "except($select :SQL::Maker::Select | \f(CW$set\fR :SQL::Maker::SelectSet) : SQL::Maker::SelectSet" 4
.IX Item "except($select :SQL::Maker::Select | $set :SQL::Maker::SelectSet) : SQL::Maker::SelectSet"
Tow statements are combined by \f(CW\*(C`EXCEPT ALL\*(C'\fR.
.SH "Class Method"
.IX Header "Class Method"
.ie n .IP "my $stmt = SQL::Maker::SelectSet\->new( %args )" 4
.el .IP "my \f(CW$stmt\fR = SQL::Maker::SelectSet\->new( \f(CW%args\fR )" 4
.IX Item "my $stmt = SQL::Maker::SelectSet->new( %args )"
\&\f(CW$opretaor\fR is a set operator (ex. \f(CW\*(C`UNION\*(C'\fR).
\&\f(CW$one\fR and \f(CW$another\fR are SQL::Maker::Select object or SQL::Maker::SelectSet object.
It returns a SQL::Maker::SelectSet object.
.Sp
The parameters are:
.RS 4
.ie n .IP "$new_line" 4
.el .IP "\f(CW$new_line\fR" 4
.IX Item "$new_line"
Default values is \*(L"\en\*(R".
.ie n .IP "$operator : Str" 4
.el .IP "\f(CW$operator\fR : Str" 4
.IX Item "$operator : Str"
The operator. This parameter is required.
.RE
.RS 4
.RE
.SH "Instance Methods"
.IX Header "Instance Methods"
.ie n .IP "my $sql = $set\->\fIas_sql()\fR : Str" 4
.el .IP "my \f(CW$sql\fR = \f(CW$set\fR\->\fIas_sql()\fR : Str" 4
.IX Item "my $sql = $set->as_sql() : Str"
Returns a new select statement.
.ie n .IP "my @binds = $set\->\fIbind()\fR : Array[Str]" 4
.el .IP "my \f(CW@binds\fR = \f(CW$set\fR\->\fIbind()\fR : Array[Str]" 4
.IX Item "my @binds = $set->bind() : Array[Str]"
Returns bind variables.
.ie n .IP "$set\->add_statement($stmt : $stmt\->can('as_sql')) : SQL::Maker::SelectSet" 4
.el .IP "\f(CW$set\fR\->add_statement($stmt : \f(CW$stmt\fR\->can('as_sql')) : SQL::Maker::SelectSet" 4
.IX Item "$set->add_statement($stmt : $stmt->can('as_sql')) : SQL::Maker::SelectSet"
This method adds new statement object. \f(CW$stmt\fR must provides 'as_sql' method.
.Sp
\&\fIReturn Value\fR is the \f(CW$set\fR itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
SQL::Maker::Select
