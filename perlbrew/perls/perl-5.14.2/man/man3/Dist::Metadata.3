.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Dist::Metadata 3"
.TH Dist::Metadata 3 "2012-06-19" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dist::Metadata \- Information about a perl module distribution
.SH "VERSION"
.IX Header "VERSION"
version 0.923
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  my $dist = Dist::Metadata\->new(file => $path_to_archive);
\&
\&  my $description = sprintf "Dist %s (%s)", $dist\->name, $dist\->version;
\&
\&  my $provides = $dist\->package_versions;
\&  while( my ($package, $version) = each %$provides ){
\&    print "$description includes $package $version\en";
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides an easy interface for getting various metadata
about a Perl module distribution.
.PP
It takes care of the common logic of:
.IP "\(bu" 4
reading a tar file (Archive::Tar)
.IP "\(bu" 4
finding and reading the correct \s-1META\s0 file if the distribution contains one (CPAN::Meta)
.IP "\(bu" 4
and determining some of the metadata if there is no \s-1META\s0 file (Module::Metadata, CPAN::DistnameInfo)
.PP
This is mostly a wrapper around CPAN::Meta providing an easy interface
to find and load the meta file from a \fItar.gz\fR file.
A dist can also be represented by a directory or merely a structure of data.
.PP
If the dist does not contain a meta file
the module will attempt to determine some of that data from the dist.
.PP
\&\fB\s-1NOTE\s0\fR: This interface is still being defined.
Please submit any suggestions or concerns.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&  Dist::Metadata\->new(file => $path);
.Ve
.PP
A dist can be represented by
a tar file,
a directory,
or a data structure.
.PP
The format will be determined by the presence of the following options
(checked in this order):
.IP "\(bu" 4
\&\f(CW\*(C`struct\*(C'\fR \- hash of data to build a mock dist; See Dist::Metadata::Struct.
.IP "\(bu" 4
\&\f(CW\*(C`dir\*(C'\fR \- path to the root directory of a dist
.IP "\(bu" 4
\&\f(CW\*(C`file\*(C'\fR \- the path to a \fI.tar.gz\fR file
.PP
You can also slyly pass in your own object as a \f(CW\*(C`dist\*(C'\fR parameter
in which case this module will just use that.
This can be useful if you need to use your own subclass
(perhaps while developing a new format).
.PP
Other options that can be specified:
.IP "\(bu" 4
\&\f(CW\*(C`name\*(C'\fR \- dist name
.IP "\(bu" 4
\&\f(CW\*(C`version\*(C'\fR \- dist version
.IP "\(bu" 4
\&\f(CW\*(C`determine_packages\*(C'\fR \- boolean to indicate whether dist should be searched
for packages if no \s-1META\s0 file is found.  Defaults to true.
.IP "\(bu" 4
\&\f(CW\*(C`include_inner_packages\*(C'\fR \- When determining provided packages
the default behavior is to only include packages that match the name
of the file that defines them (like \f(CW\*(C`Foo::Bar\*(C'\fR matches \f(CW\*(C`*/Bar.pm\*(C'\fR).
This way only modules that can be loaded (via \f(CW\*(C`use\*(C'\fR or \f(CW\*(C`require\*(C'\fR)
will be returned (and \*(L"inner\*(R" packages will be ignored).
This mimics the behavior of \s-1PAUSE\s0.
Set this to true to include any \*(L"inner\*(R" packages provided by the dist
(that are not otherwise excluded by another mechanism (such as \f(CW\*(C`no_index\*(C'\fR)).
.SS "dist"
.IX Subsection "dist"
Returns the dist object (subclass of Dist::Metadata::Dist).
.SS "default_metadata"
.IX Subsection "default_metadata"
Returns a hashref of default values
used to initialize a CPAN::Meta object
when a \s-1META\s0 file is not found.
Called from \*(L"determine_metadata\*(R".
.SS "determine_metadata"
.IX Subsection "determine_metadata"
Examine the dist and try to determine metadata.
Returns a hashref which can be passed to \*(L"new\*(R" in CPAN::Meta.
This is used when the dist does not contain a \s-1META\s0 file.
.SS "determine_packages"
.IX Subsection "determine_packages"
.Vb 1
\&  my $provides = $dm\->determine_packages($meta);
.Ve
.PP
Attempt to determine packages provided by the dist.
This is used when the \s-1META\s0 file does not include a \f(CW\*(C`provides\*(C'\fR
section and \f(CW\*(C`determine_packages\*(C'\fR is not set to false in the constructor.
.PP
If a CPAN::Meta object is not provided a default one will be used.
Files contained in the dist and packages found therein will be checked against
the meta object's \f(CW\*(C`no_index\*(C'\fR attribute
(see \*(L"should_index_file\*(R" in CPAN::Meta
and  \*(L"should_index_package\*(R" in CPAN::Meta).
By default this ignores any files found in
\&\fIinc/\fR,
\&\fIt/\fR,
or \fIxt/\fR
directories.
.SS "load_meta"
.IX Subsection "load_meta"
Loads the metadata from the \*(L"dist\*(R".
.SS "meta"
.IX Subsection "meta"
Returns the CPAN::Meta instance in use.
.SS "meta_from_struct"
.IX Subsection "meta_from_struct"
.Vb 1
\&  $meta = $dm\->meta_from_struct(\e%struct);
.Ve
.PP
Passes the the provided \f(CW\*(C`\e%struct\*(C'\fR to \*(L"create\*(R" in CPAN::Meta
and returns the result.
.SS "package_versions"
.IX Subsection "package_versions"
.Vb 2
\&  $pv = $dm\->package_versions();
\&  # { \*(AqPackage::Name\*(Aq => \*(Aq1.0\*(Aq, \*(AqModule::2\*(Aq => \*(Aq2.1\*(Aq }
.Ve
.PP
Returns a simplified version of \f(CW\*(C`provides\*(C'\fR:
a hashref with package names as keys and versions as values.
.PP
This can also be called as a class method
which will operate on a passed in hashref.
.PP
.Vb 1
\&  $pv = Dist::Metadata\->package_versions(\e%provides);
.Ve
.SH "INHERITED METHODS"
.IX Header "INHERITED METHODS"
The following methods are available on this object
and simply call the corresponding method on the CPAN::Meta object.
.IP "\(bu" 4
 name
.IX Xref "name"
.IP "\(bu" 4
 provides
.IX Xref "provides"
.IP "\(bu" 4
 version
.IX Xref "version"
.SH "TODO"
.IX Header "TODO"
.IP "\(bu" 4
More tests
.IP "\(bu" 4
\&\f(CW\*(C`trust_meta\*(C'\fR option (to allow setting it to false)
.IP "\(bu" 4
Guess main module from dist name if no packages can be found
.IP "\(bu" 4
Determine abstract?
.IP "\(bu" 4
Add change log info (CPAN::Changes)?
.IP "\(bu" 4
Subclass as \f(CW\*(C`CPAN::Dist::Metadata\*(C'\fR just so that it has \f(CW\*(C`CPAN\*(C'\fR in the name?
.IP "\(bu" 4
Use File::Find::Rule::Perl?
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.SS "Dependencies"
.IX Subsection "Dependencies"
.IP "\(bu" 4
CPAN::Meta
.IP "\(bu" 4
Module::Metadata
.IP "\(bu" 4
CPAN::DistnameInfo
.SS "Related Modules"
.IX Subsection "Related Modules"
.IP "\(bu" 4
MyCPAN::Indexer
.IP "\(bu" 4
CPAN::ParseDistribution
.SH "SUPPORT"
.IX Header "SUPPORT"
.SS "Perldoc"
.IX Subsection "Perldoc"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&  perldoc Dist::Metadata
.Ve
.SS "Websites"
.IX Subsection "Websites"
The following websites have more information about this module, and may be of help to you. As always,
in addition to those websites please use your favorite search engine to discover more resources.
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
The default \s-1CPAN\s0 search engine, useful to view \s-1POD\s0 in \s-1HTML\s0 format.
.Sp
http://search.cpan.org/dist/Dist\-Metadata <http://search.cpan.org/dist/Dist-Metadata>
.IP "\(bu" 4
\&\s-1RT:\s0 \s-1CPAN\s0's Bug Tracker
.Sp
The \s-1RT\s0 ( Request Tracker ) website is the default bug/issue tracking system for \s-1CPAN\s0.
.Sp
http://rt.cpan.org/NoAuth/Bugs.html?Dist=Dist\-Metadata <http://rt.cpan.org/NoAuth/Bugs.html?Dist=Dist-Metadata>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
The \s-1CPAN\s0 Ratings is a website that allows community ratings and reviews of Perl modules.
.Sp
http://cpanratings.perl.org/d/Dist\-Metadata <http://cpanratings.perl.org/d/Dist-Metadata>
.IP "\(bu" 4
\&\s-1CPAN\s0 Testers
.Sp
The \s-1CPAN\s0 Testers is a network of smokers who run automated tests on uploaded \s-1CPAN\s0 distributions.
.Sp
http://www.cpantesters.org/distro/D/Dist\-Metadata <http://www.cpantesters.org/distro/D/Dist-Metadata>
.IP "\(bu" 4
\&\s-1CPAN\s0 Testers Matrix
.Sp
The \s-1CPAN\s0 Testers Matrix is a website that provides a visual overview of the test results for a distribution on various Perls/platforms.
.Sp
http://matrix.cpantesters.org/?dist=Dist\-Metadata <http://matrix.cpantesters.org/?dist=Dist-Metadata>
.IP "\(bu" 4
\&\s-1CPAN\s0 Testers Dependencies
.Sp
The \s-1CPAN\s0 Testers Dependencies is a website that shows a chart of the test results of all dependencies for a distribution.
.Sp
<http://deps.cpantesters.org/?module=Dist::Metadata>
.SS "Bugs / Feature Requests"
.IX Subsection "Bugs / Feature Requests"
Please report any bugs or feature requests by email to \f(CW\*(C`bug\-dist\-metadata at rt.cpan.org\*(C'\fR, or through
the web interface at http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Dist\-Metadata <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Dist-Metadata>. You will be automatically notified of any
progress on the request by the system.
.SS "Source Code"
.IX Subsection "Source Code"
https://github.com/rwstauner/Dist\-Metadata <https://github.com/rwstauner/Dist-Metadata>
.PP
.Vb 1
\&  git clone https://github.com/rwstauner/Dist\-Metadata.git
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Randy Stauner <rwstauner@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011 by Randy Stauner.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
