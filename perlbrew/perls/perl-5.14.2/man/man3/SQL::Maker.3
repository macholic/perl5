.\" Automatically generated by Pod::Man 2.26 (Pod::Simple 3.22)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SQL::Maker 3"
.TH SQL::Maker 3 "2012-06-27" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SQL::Maker \- Yet another SQL builder
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use SQL::Maker;
\&
\&    my $builder = SQL::Maker\->new(
\&        driver => \*(AqSQLite\*(Aq, # or your favorite driver
\&    );
\&
\&    # SELECT
\&    ($sql, @binds) = $builder\->select($table, \e@fields, \e%where, \e%opt);
\&
\&    # INSERT
\&    ($sql, @binds) = $builder\->insert($table, \e%values);
\&
\&    # DELETE
\&    ($sql, @binds) = $builder\->delete($table, \e%values);
\&
\&    # UPDATE
\&    ($sql, @binds) = $builder\->update($table, \e%set, \e%where);
\&    ($sql, @binds) = $builder\->update($table, \e@set, \e%where);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SQL::Maker is yet another \s-1SQL\s0 builder class. It is based on DBIx::Skinny's \s-1SQL\s0 generator.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "my $builder = SQL::Maker\->new(%args);" 4
.el .IP "my \f(CW$builder\fR = SQL::Maker\->new(%args);" 4
.IX Item "my $builder = SQL::Maker->new(%args);"
Create new instance of SQL::Maker.
.Sp
Attributes are following:
.RS 4
.IP "driver: Str" 4
.IX Item "driver: Str"
Driver name is required. The driver type is needed to create \s-1SQL\s0 string.
.IP "quote_char: Str" 4
.IX Item "quote_char: Str"
This is the character that a table or column name will be quoted with.
.Sp
Default: auto detect from \f(CW$driver\fR.
.IP "name_sep: Str" 4
.IX Item "name_sep: Str"
This is the character that separates a table and column name.
.Sp
Default: '.'
.IP "new_line: Str" 4
.IX Item "new_line: Str"
This is the character that separates a part of statements.
.Sp
Default: '\en'
.RE
.RS 4
.RE
.ie n .IP "my $select = $builder\->new_select(%args|\e%args);" 4
.el .IP "my \f(CW$select\fR = \f(CW$builder\fR\->new_select(%args|\e%args);" 4
.IX Item "my $select = $builder->new_select(%args|%args);"
Create new instance of SQL::Maker::Select from the settings from \fB\f(CB$builder\fB\fR.
.Sp
This method returns instance of SQL::Maker::Select.
.ie n .IP "my ($sql, @binds) = $builder\->select($table|\e@tables, \e@fields, \e%where|\e@where|$where, \e%opt);" 4
.el .IP "my ($sql, \f(CW@binds\fR) = \f(CW$builder\fR\->select($table|\e@tables, \e@fields, \e%where|\e@where|$where, \e%opt);" 4
.IX Item "my ($sql, @binds) = $builder->select($table|@tables, @fields, %where|@where|$where, %opt);"
.Vb 4
\&    my ($sql, @binds) = $builder\->select(\*(Aquser\*(Aq, [\*(Aq*\*(Aq], {name => \*(Aqjohn\*(Aq}, {order_by => \*(Aquser_id DESC\*(Aq});
\&    # =>
\&    #   SELECT * FROM \`user\` WHERE (\`name\` = ?) ORDER BY user_id DESC
\&    #   [\*(Aqjohn\*(Aq]
.Ve
.Sp
This method returns \s-1SQL\s0 string and bind variables for \s-1SELECT\s0 statement.
.RS 4
.ie n .IP "$table" 4
.el .IP "\f(CW$table\fR" 4
.IX Item "$table"
.PD 0
.IP "\e@tables" 4
.IX Item "@tables"
.PD
Table name for \fB\s-1FROM\s0\fR clause in scalar or arrayref. You can specify the instance of \fBSQL::Maker::Select\fR for sub-query.
.IP "\e@fields" 4
.IX Item "@fields"
This is a list for retrieving fields from database.
.IP "\e%where" 4
.IX Item "%where"
.PD 0
.IP "\e@where" 4
.IX Item "@where"
.ie n .IP "$where" 4
.el .IP "\f(CW$where\fR" 4
.IX Item "$where"
.PD
where clause from hashref or arrayref via SQL::Maker::Condition, or SQL::Maker::Condition object.
.IP "\e%opt" 4
.IX Item "%opt"
This is a options for \s-1SELECT\s0 statement
.RS 4
.ie n .IP "$opt\->{prefix}" 4
.el .IP "\f(CW$opt\fR\->{prefix}" 4
.IX Item "$opt->{prefix}"
This is a prefix for \s-1SELECT\s0 statement.
.Sp
For example, you can provide the '\s-1SELECT\s0 \s-1SQL_CALC_FOUND_ROWS\s0 '. It's useful for MySQL.
.Sp
Default Value: '\s-1SELECT\s0 '
.ie n .IP "$opt\->{limit}" 4
.el .IP "\f(CW$opt\fR\->{limit}" 4
.IX Item "$opt->{limit}"
This option makes '\s-1LIMIT\s0 \f(CW$n\fR' clause.
.ie n .IP "$opt\->{offset}" 4
.el .IP "\f(CW$opt\fR\->{offset}" 4
.IX Item "$opt->{offset}"
This option makes '\s-1OFFSET\s0 \f(CW$n\fR' clause.
.ie n .IP "$opt\->{order_by}" 4
.el .IP "\f(CW$opt\fR\->{order_by}" 4
.IX Item "$opt->{order_by}"
This option makes \fB\s-1ORDER\s0 \s-1BY\s0\fR clause
.Sp
You can write it as following forms:
.Sp
.Vb 4
\&    $builder\->select(..., order_by => \*(Aqfoo DESC, bar ASC\*(Aq);
\&    $builder\->select(..., order_by => [\*(Aqfoo DESC\*(Aq, \*(Aqbar ASC\*(Aq]);
\&    $builder\->select(..., order_by => {foo => \*(AqDESC\*(Aq});
\&    $builder\->select(..., order_by => [{foo => \*(AqDESC\*(Aq}, {bar => \*(AqASC\*(Aq}]);
.Ve
.ie n .IP "$opt\->{group_by}" 4
.el .IP "\f(CW$opt\fR\->{group_by}" 4
.IX Item "$opt->{group_by}"
This option makes \fB\s-1GROUP\s0 \s-1BY\s0\fR clause
.Sp
You can write it as following forms:
.Sp
.Vb 4
\&    $builder\->select(..., group_by => \*(Aqfoo DESC, bar ASC\*(Aq);
\&    $builder\->select(..., group_by => [\*(Aqfoo DESC\*(Aq, \*(Aqbar ASC\*(Aq]);
\&    $builder\->select(..., group_by => {foo => \*(AqDESC\*(Aq});
\&    $builder\->select(..., group_by => [{foo => \*(AqDESC\*(Aq}, {bar => \*(AqASC\*(Aq}]);
.Ve
.ie n .IP "$opt\->{having}" 4
.el .IP "\f(CW$opt\fR\->{having}" 4
.IX Item "$opt->{having}"
This option makes \s-1HAVING\s0 clause
.ie n .IP "$opt\->{for_update}" 4
.el .IP "\f(CW$opt\fR\->{for_update}" 4
.IX Item "$opt->{for_update}"
This option makes '\s-1FOR\s0 \s-1UPDATE\s0" clause.
.ie n .IP "$opt\->{joins}" 4
.el .IP "\f(CW$opt\fR\->{joins}" 4
.IX Item "$opt->{joins}"
This option makes '\s-1JOIN\s0' via SQL::Maker::Condition.
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.ie n .IP "my ($sql, @binds) = $builder\->insert($table, \e%values|\e@values);" 4
.el .IP "my ($sql, \f(CW@binds\fR) = \f(CW$builder\fR\->insert($table, \e%values|\e@values);" 4
.IX Item "my ($sql, @binds) = $builder->insert($table, %values|@values);"
.Vb 4
\&    my ($sql, @binds) = $builder\->insert(user => {name => \*(Aqjohn\*(Aq});
\&    # =>
\&    #    INSERT INTO \`user\` (\`name\`) VALUES (?)
\&    #    [\*(Aqjohn\*(Aq]
.Ve
.Sp
Generate \s-1INSERT\s0 query.
.RS 4
.ie n .IP "$table" 4
.el .IP "\f(CW$table\fR" 4
.IX Item "$table"
Table name in scalar.
.IP "\e%values" 4
.IX Item "%values"
This is a values for \s-1INSERT\s0 statement.
.RE
.RS 4
.RE
.ie n .IP "my ($sql, @binds) = $builder\->delete($table, \e%where|\e@where|$where);" 4
.el .IP "my ($sql, \f(CW@binds\fR) = \f(CW$builder\fR\->delete($table, \e%where|\e@where|$where);" 4
.IX Item "my ($sql, @binds) = $builder->delete($table, %where|@where|$where);"
.Vb 4
\&    my ($sql, @binds) = $builder\->delete($table, \e%where);
\&    # =>
\&    #    DELETE FROM \`user\` WHERE (\`name\` = ?)
\&    #    [\*(Aqjohn\*(Aq]
.Ve
.Sp
Generate \s-1DELETE\s0 query.
.RS 4
.ie n .IP "$table" 4
.el .IP "\f(CW$table\fR" 4
.IX Item "$table"
Table name in scalar.
.IP "\e%where" 4
.IX Item "%where"
.PD 0
.IP "\e@where" 4
.IX Item "@where"
.ie n .IP "$where" 4
.el .IP "\f(CW$where\fR" 4
.IX Item "$where"
.PD
where clause from hashref or arrayref via SQL::Maker::Condition, or SQL::Maker::Condition object.
.RE
.RS 4
.RE
.ie n .IP "my ($sql, @binds) = $builder\->update($table, \e%set|@set, \e%where|\e@where|$where);" 4
.el .IP "my ($sql, \f(CW@binds\fR) = \f(CW$builder\fR\->update($table, \e%set|@set, \e%where|\e@where|$where);" 4
.IX Item "my ($sql, @binds) = $builder->update($table, %set|@set, %where|@where|$where);"
Generate \s-1UPDATE\s0 query.
.Sp
.Vb 4
\&    my ($sql, @binds) = $builder\->update(\*(Aquser\*(Aq, [\*(Aqname\*(Aq => \*(Aqjohn\*(Aq, email => \*(Aqjohn@example.com\*(Aq], {user_id => 3});
\&    # =>
\&    #    \*(AqUPDATE \`user\` SET \`name\` = ?, \`email\` = ? WHERE (\`user_id\` = ?)\*(Aq
\&    #    [\*(Aqjohn\*(Aq,\*(Aqjohn@example.com\*(Aq,3]
.Ve
.RS 4
.ie n .IP "$table" 4
.el .IP "\f(CW$table\fR" 4
.IX Item "$table"
Table name in scalar.
.IP "\e%set" 4
.IX Item "%set"
Setting values.
.IP "\e%where" 4
.IX Item "%where"
.PD 0
.IP "\e@where" 4
.IX Item "@where"
.ie n .IP "$where" 4
.el .IP "\f(CW$where\fR" 4
.IX Item "$where"
.PD
where clause from hashref or arrayref via SQL::Maker::Condition, or SQL::Maker::Condition object.
.RE
.RS 4
.RE
.SH "PLUGINS"
.IX Header "PLUGINS"
SQL::Maker supports plugin system. Write the code like following.
.PP
.Vb 3
\&    package My::SQL::Maker;
\&    use parent qw/SQL::Maker/;
\&    _\|_PACKAGE_\|_\->load_plugin(\*(AqInsertMulti\*(Aq);
.Ve
.SH "FAQ"
.IX Header "FAQ"
.IP "Why don't you use  SQL::Abstract?" 4
.IX Item "Why don't you use  SQL::Abstract?"
I need more extensible one.
.Sp
So, this module contains SQL::Maker::Select, the extensible \fB\s-1SELECT\s0\fR clause object.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tokuhiro Matsuno <tokuhirom AAJKLFJEF@ \s-1GMAIL\s0 \s-1COM\s0>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
SQL::Abstract
.PP
Whole code was taken from DBIx::Skinny by nekokak++.
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) Tokuhiro Matsuno
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
