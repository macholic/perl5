.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Dist::Metadata::Dist 3"
.TH Dist::Metadata::Dist 3 "2012-06-19" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dist::Metadata::Dist \- Base class for format\-specific implementations
.SH "VERSION"
.IX Header "VERSION"
version 0.923
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  # don\*(Aqt use this, use a subclass
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a base class for different dist formats.
.PP
The following methods \fBmust\fR be defined by subclasses:
.IP "\(bu" 4
\&\*(L"file_content\*(R"
.IP "\(bu" 4
\&\*(L"find_files\*(R"
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
Simple constructor that subclasses can inherit.
Ensures the presence of \*(L"required_attribute\*(R"
if defined by the subclass.
.SS "default_file_spec"
.IX Subsection "default_file_spec"
Defaults to \f(CW\*(AqNative\*(Aq\fR in the base class
which will let File::Spec determine the value.
.SS "determine_name_and_version"
.IX Subsection "determine_name_and_version"
Some dist formats may define a way to determine the name and version.
.SS "determine_packages"
.IX Subsection "determine_packages"
.Vb 1
\&  $packages = $dist\->determine_packages(@files);
.Ve
.PP
Search the specified files (or all files if unspecified)
for perl packages.
.PP
Extracts the files to a temporary directory if necessary
and uses Module::Metadata to discover package names and versions.
.SS "extract_into"
.IX Subsection "extract_into"
.Vb 2
\&  $ddir = $dist\->extract_into($dir);
\&  ($ddir, @dfiles) = $dist\->extract_into($dir, @files);
.Ve
.PP
Extracts the specified files (or all files if not specified)
into the specified directory.
.PP
In list context this returns a list of the directory
(which may be a subdirectory of the \f(CW$dir\fR passed in)
and the files extracted (in native \s-1OS\s0 (on-disk) format).
.PP
In scalar context just the directory is returned.
.SS "file_content"
.IX Subsection "file_content"
Returns the content for the specified file from the dist.
.PP
This \fBmust\fR be defined by subclasses.
.SS "find_files"
.IX Subsection "find_files"
Determine the files contained in the dist.
.PP
This is called from \*(L"list_files\*(R" and cached on the object.
.PP
This \fBmust\fR be defined by subclasses.
.SS "file_spec"
.IX Subsection "file_spec"
Returns the \s-1OS\s0 name of the File::Spec module used for this format.
This is mostly so subclasses can define a specific one
(as \*(L"default_file_spec\*(R") if necessary.
.PP
A \f(CW\*(C`file_spec\*(C'\fR attribute can be passed to the constructor
to override the default.
.PP
\&\fB\s-1NOTE\s0\fR: This is used for the internal format of the dist.
Tar archives, for example, are always in unix format.
For operations outside of the dist,
the format determined by File::Spec will always be used.
.SS "full_path"
.IX Subsection "full_path"
.Vb 1
\&  $dist\->full_path("lib/Mod.pm"); # "root\-dir/lib/Mod.pm"
.Ve
.PP
Used internally to put the \*(L"root\*(R" directory back onto the file.
.SS "list_files"
.IX Subsection "list_files"
Returns a list of the files in the dist starting at the dist root.
.PP
This calls \*(L"find_files\*(R" to get a listing of the contents of the dist,
determines (and caches) the root directory (if any),
caches and returns the the list of files with the root dir stripped.
.PP
.Vb 2
\&  @files = $dist\->list_files;
\&  # something like qw( README META.yml lib/Mod.pm )
.Ve
.SS "name"
.IX Subsection "name"
The dist name if it could be determined.
.SS "packages_from_directory"
.IX Subsection "packages_from_directory"
.Vb 1
\&  $provides = $dist\->packages_from_directory($dir, @files);
.Ve
.PP
Determines the packages provided by the perl modules found in a directory.
This is thin wrapper around
\&\*(L"package_versions_from_directory\*(R" in Module::Metadata.
It returns a hashref like \*(L"provides\*(R" in CPAN::Meta::Spec.
.PP
\&\fB\s-1NOTE\s0\fR: \f(CW$dir\fR must be a physical directory on the disk,
therefore \f(CW@files\fR (if specified) must be in native \s-1OS\s0 format.
This function is called internally from \*(L"determine_packages\*(R"
(which calls physical_directory (which calls \*(L"extract_into\*(R"))
which manages these requirements.
.SS "parse_name_and_version"
.IX Subsection "parse_name_and_version"
.Vb 1
\&  ($name, $version) = $dist\->parse_name_and_version($path);
.Ve
.PP
Attempt to parse name and version from the provided string.
This will work for dists named like \*(L"Dist\-Name\-1.0\*(R".
.SS "path_class_dir"
.IX Subsection "path_class_dir"
Returns the class name used for Path::Class::Dir objects.
.SS "path_class_file"
.IX Subsection "path_class_file"
Returns the class name used for Path::Class::File objects.
.SS "path_classify_dir"
.IX Subsection "path_classify_dir"
This is a shortcut for returning an object representing the provided
dir utilizing \*(L"path_class_dir\*(R" and \*(L"file_spec\*(R".
.SS "path_classify_file"
.IX Subsection "path_classify_file"
This is a shortcut for returning an object representing the provided
file utilizing \*(L"path_class_file\*(R" and \*(L"file_spec\*(R".
.SS "perl_files"
.IX Subsection "perl_files"
Returns the subset of \*(L"list_files\*(R" that look like perl files.
Currently returns anything matching \f(CW\*(C`/\e.pm$/\*(C'\fR
.PP
\&\fB\s-1TODO\s0\fR: This should probably be customizable.
.SS "physical_directory"
.IX Subsection "physical_directory"
.Vb 2
\&  $dir = $dist\->physical_directory();
\&  ($dir, @dir_files) = $dist\->physical_directory(@files);
.Ve
.PP
Returns the path to a physical directory on the disk
where the specified files (if any) can be found.
.PP
For in-memory formats this will make a temporary directory
and write the specified files (or all files) into it.
.PP
The return value is the same as \*(L"extract_into\*(R":
In scalar context the path to the directory is returned.
In list context the (possibly adjusted) paths to any specified files
are appended to the return value.
.SS "remove_root_dir"
.IX Subsection "remove_root_dir"
.Vb 1
\&  my ($dir, @rel) = $dm\->remove_root_dir(@files);
.Ve
.PP
If all the \f(CW@files\fR are beneath the same root directory
(as is normally the case) this will strip the root directory off of each file
and return a list of the root directory and the stripped files.
.PP
If there is no root directory the first element of the list will be \f(CW\*(C`undef\*(C'\fR.
.SS "required_attribute"
.IX Subsection "required_attribute"
A single attribute that is required by the class.
Subclasses can define this to make \*(L"new\*(R" \f(CW\*(C`croak\*(C'\fR if it isn't present.
.SS "root"
.IX Subsection "root"
Returns the root directory of the dist (if there is one).
.SS "set_name_and_version"
.IX Subsection "set_name_and_version"
This is a convenience method for setting the name and version
if they haven't already been set.
This is often called by \*(L"determine_name_and_version\*(R".
.SS "version"
.IX Subsection "version"
Returns the version if it could be determined from the dist.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
Dist::Metadata::Tar \- for examining a tar file
.IP "\(bu" 4
Dist::Metadata::Dir \- for a directory already on the disk
.IP "\(bu" 4
Dist::Metadata::Struct \- for mocking up a dist with perl data structures
.SH "AUTHOR"
.IX Header "AUTHOR"
Randy Stauner <rwstauner@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011 by Randy Stauner.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
