.\" Automatically generated by Pod::Man 2.26 (Pod::Simple 3.22)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SQL::Maker::Select 3"
.TH SQL::Maker::Select 3 "2012-06-27" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SQL::Maker::Select \- dynamic SQL generator
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&    my $sql = SQL::Maker::Select\->new()
\&                                  \->add_select(\*(Aqfoo\*(Aq)
\&                                  \->add_select(\*(Aqbar\*(Aq)
\&                                  \->add_select(\*(Aqbaz\*(Aq)
\&                                  \->add_from(\*(Aqtable_name\*(Aq)
\&                                  \->as_sql;
\&    # => "SELECT foo, bar, baz FROM table_name"
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "my $sql = $stmt\->\fIas_sql()\fR;" 4
.el .IP "my \f(CW$sql\fR = \f(CW$stmt\fR\->\fIas_sql()\fR;" 4
.IX Item "my $sql = $stmt->as_sql();"
Render the \s-1SQL\s0 string.
.ie n .IP "my @bind = $stmt\->\fIbind()\fR;" 4
.el .IP "my \f(CW@bind\fR = \f(CW$stmt\fR\->\fIbind()\fR;" 4
.IX Item "my @bind = $stmt->bind();"
Get bind variables.
.ie n .IP "$stmt\->add_select('*')" 4
.el .IP "\f(CW$stmt\fR\->add_select('*')" 4
.IX Item "$stmt->add_select('*')"
.PD 0
.ie n .IP "$stmt\->add_select($col => $alias)" 4
.el .IP "\f(CW$stmt\fR\->add_select($col => \f(CW$alias\fR)" 4
.IX Item "$stmt->add_select($col => $alias)"
.ie n .IP "$stmt\->add_select(\e'\s-1COUNT\s0(*)' => 'cnt')" 4
.el .IP "\f(CW$stmt\fR\->add_select(\e'\s-1COUNT\s0(*)' => 'cnt')" 4
.IX Item "$stmt->add_select('COUNT(*)' => 'cnt')"
.PD
Add new select term. It's quote automatically.
.ie n .IP "$stmt\->add_from($table :Str | $select :SQL::Maker::Select) : SQL::Maker::Select" 4
.el .IP "\f(CW$stmt\fR\->add_from($table :Str | \f(CW$select\fR :SQL::Maker::Select) : SQL::Maker::Select" 4
.IX Item "$stmt->add_from($table :Str | $select :SQL::Maker::Select) : SQL::Maker::Select"
Add new from clause. You can specify the table name or instance of SQL::Maker::Select for sub-query.
.Sp
\&\fIReturn:\fR \f(CW$stmt\fR itself.
.ie n .IP "$stmt\->add_join(user => {type => 'inner', table => 'config', condition => 'user.user_id = config.user_id'});" 4
.el .IP "\f(CW$stmt\fR\->add_join(user => {type => 'inner', table => 'config', condition => 'user.user_id = config.user_id'});" 4
.IX Item "$stmt->add_join(user => {type => 'inner', table => 'config', condition => 'user.user_id = config.user_id'});"
.PD 0
.ie n .IP "$stmt\->add_join(user => {type => 'inner', table => 'config', condition => ['user_id']});" 4
.el .IP "\f(CW$stmt\fR\->add_join(user => {type => 'inner', table => 'config', condition => ['user_id']});" 4
.IX Item "$stmt->add_join(user => {type => 'inner', table => 'config', condition => ['user_id']});"
.PD
Add new \s-1JOIN\s0 clause. If you pass arrayref for 'condition' then it uses '\s-1USING\s0'.
.Sp
.Vb 10
\&    my $stmt = SQL::Maker::Select\->new();
\&    $stmt\->add_join(
\&        user => {
\&            type      => \*(Aqinner\*(Aq,
\&            table     => \*(Aqconfig\*(Aq,
\&            condition => \*(Aquser.user_id = config.user_id\*(Aq,
\&        }
\&    );
\&    $stmt\->as_sql();
\&    # => \*(AqFROM user INNER JOIN config ON user.user_id = config.user_id\*(Aq
\&
\&
\&    my $stmt = SQL::Maker::Select\->new();
\&    $stmt\->add_select(\*(Aqname\*(Aq);
\&    $stmt\->add_join(
\&        user => {
\&            type      => \*(Aqinner\*(Aq,
\&            table     => \*(Aqconfig\*(Aq,
\&            condition => [\*(Aquser_id\*(Aq],
\&        }
\&    );
\&    $stmt\->as_sql();
\&    # => \*(AqSELECT name FROM user INNER JOIN config USING (user_id)\*(Aq
\&
\&    my $subquery = SQL::Maker::Select\->new();
\&    $subquery\->add_select(\*(Aq*\*(Aq);
\&    $subquery\->add_from( \*(Aqfoo\*(Aq );
\&    $subquery\->add_where( \*(Aqhoge\*(Aq => \*(Aqfuga\*(Aq );
\&    my $stmt = SQL::Maker::Select\->new();
\&    $stmt\->add_join(
\&        [ $subquery, \*(Aqbar\*(Aq ] => {
\&            type      => \*(Aqinner\*(Aq,
\&            table     => \*(Aqbaz\*(Aq,
\&            alias     => \*(Aqb1\*(Aq,
\&            condition => \*(Aqbar.baz_id = b1.baz_id\*(Aq
\&        },
\&    );
\&    $stmt\->as_sql;
\&    # => "FROM (SELECT * FROM foo WHERE (hoge = ?)) bar INNER JOIN baz b1 ON bar.baz_id = b1.baz_id";
.Ve
.ie n .IP "$stmt\->add_index_hint(foo => {type => '\s-1USE\s0', list => ['index_hint']});" 4
.el .IP "\f(CW$stmt\fR\->add_index_hint(foo => {type => '\s-1USE\s0', list => ['index_hint']});" 4
.IX Item "$stmt->add_index_hint(foo => {type => 'USE', list => ['index_hint']});"
.Vb 6
\&    my $stmt = SQL::Maker::Select\->new();
\&    $stmt\->add_select(\*(Aqname\*(Aq);
\&    $stmt\->add_from(\*(Aquser\*(Aq);
\&    $stmt\->add_index_hint(user => {type => \*(AqUSE\*(Aq, list => [\*(Aqindex_hint\*(Aq]});
\&    $stmt\->as_sql();
\&    # => "SELECT name FROM user USE INDEX (index_hint)"
.Ve
.ie n .IP "$stmt\->add_where('foo_id' => 'bar');" 4
.el .IP "\f(CW$stmt\fR\->add_where('foo_id' => 'bar');" 4
.IX Item "$stmt->add_where('foo_id' => 'bar');"
Add new where clause.
.Sp
.Vb 7
\&    my $stmt = SQL::Maker::Select\->new()
\&                                   \->add_select(\*(Aqc\*(Aq)
\&                                   \->add_from(\*(Aqfoo\*(Aq)
\&                                   \->add_where(\*(Aqname\*(Aq => \*(Aqjohn\*(Aq)
\&                                   \->add_where(\*(Aqtype\*(Aq => {IN => [qw/1 2 3/]})
\&                                   \->as_sql();
\&    # => "SELECT c FROM foo WHERE (name = ?) AND (type IN (?, ?, ?))"
.Ve
.ie n .IP "$stmt\->set_where($condition)" 4
.el .IP "\f(CW$stmt\fR\->set_where($condition)" 4
.IX Item "$stmt->set_where($condition)"
Set the where clause.
.Sp
\&\f(CW$condition\fR should be instance of SQL::Maker::Condition.
.Sp
.Vb 10
\&    my $cond1 = SQL::Maker::Condition\->new()
\&                                       \->add("name" => "john");
\&    my $cond2 = SQL::Maker::Condition\->new()
\&                                       \->add("type" => {IN => [qw/1 2 3/]});
\&    my $stmt = SQL::Maker::Select\->new()
\&                                   \->add_select(\*(Aqc\*(Aq)
\&                                   \->add_from(\*(Aqfoo\*(Aq)
\&                                   \->set_where($cond1 & $cond2)
\&                                   \->as_sql();
\&    # => "SELECT c FROM foo WHERE ((name = ?)) AND ((type IN (?, ?, ?)))"
.Ve
.ie n .IP "$stmt\->add_order_by('foo');" 4
.el .IP "\f(CW$stmt\fR\->add_order_by('foo');" 4
.IX Item "$stmt->add_order_by('foo');"
.PD 0
.ie n .IP "$stmt\->add_order_by({'foo' => '\s-1DESC\s0'});" 4
.el .IP "\f(CW$stmt\fR\->add_order_by({'foo' => '\s-1DESC\s0'});" 4
.IX Item "$stmt->add_order_by({'foo' => 'DESC'});"
.PD
Add new order by clause.
.Sp
.Vb 7
\&    my $stmt = SQL::Maker::Select\->new()
\&                                   \->add_select(\*(Aqc\*(Aq)
\&                                   \->add_from(\*(Aqfoo\*(Aq)
\&                                   \->add_order_by(\*(Aqname\*(Aq => \*(AqDESC\*(Aq)
\&                                   \->add_order_by(\*(Aqid\*(Aq)
\&                                   \->as_sql();
\&    # => "SELECT c FROM foo ORDER BY name DESC, id"
.Ve
.ie n .IP "$stmt\->add_group_by('foo');" 4
.el .IP "\f(CW$stmt\fR\->add_group_by('foo');" 4
.IX Item "$stmt->add_group_by('foo');"
Add new \s-1GROUP\s0 \s-1BY\s0 clause.
.Sp
.Vb 6
\&    my $stmt = SQL::Maker::Select\->new()
\&                                   \->add_select(\*(Aqc\*(Aq)
\&                                   \->add_from(\*(Aqfoo\*(Aq)
\&                                   \->add_group_by(\*(Aqid\*(Aq)
\&                                   \->as_sql();
\&    # => "SELECT c FROM foo GROUP BY id"
\&
\&    my $stmt = SQL::Maker::Select\->new()
\&                                   \->add_select(\*(Aqc\*(Aq)
\&                                   \->add_from(\*(Aqfoo\*(Aq)
\&                                   \->add_group_by(\*(Aqid\*(Aq => \*(AqDESC\*(Aq)
\&                                   \->as_sql();
\&    # => "SELECT c FROM foo GROUP BY id DESC"
.Ve
.ie n .IP "$stmt\->add_having(cnt => 2)" 4
.el .IP "\f(CW$stmt\fR\->add_having(cnt => 2)" 4
.IX Item "$stmt->add_having(cnt => 2)"
Add having clause
.Sp
.Vb 6
\&    my $stmt = SQL::Maker::Select\->new()
\&                                   \->add_from(\*(Aqfoo\*(Aq)
\&                                   \->add_select(\e\*(AqCOUNT(*)\*(Aq => \*(Aqcnt\*(Aq)
\&                                   \->add_having(cnt => 2)
\&                                   \->as_sql();
\&    # => "SELECT COUNT(*) AS cnt FROM foo HAVING (COUNT(*) = ?)"
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Data::ObjectDriver::SQL
